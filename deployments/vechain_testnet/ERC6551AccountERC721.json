{
  "address": "0x61fdf655eAcA6228b053D83B75C914d52868e7e6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "operation",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "isValidSigner",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2edaf56533cefee8a97505157265e9e14faf59a3f77c8914fe966987877540bd",
  "receipt": {
    "to": null,
    "from": "0xd64E541bD311B901A989C1f1e178a55593118bBB",
    "contractAddress": "0x61fdf655eAcA6228b053D83B75C914d52868e7e6",
    "transactionIndex": 1,
    "gasUsed": "1365957",
    "logsBloom": "0x
    "blockHash": "0x011e0aa413d1cf2ebe06cae20261448b37840cbe781a3260e1f1b833cf8b2882",
    "transactionHash": "0x2edaf56533cefee8a97505157265e9e14faf59a3f77c8914fe966987877540bd",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 18746020,
        "transactionHash": "0x2edaf56533cefee8a97505157265e9e14faf59a3f77c8914fe966987877540bd",
        "address": "0x61fdf655eAcA6228b053D83B75C914d52868e7e6",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x000000000000000000000000d64e541bd311b901a989c1f1e178a55593118bbb",
        "logIndex": 2,
        "blockHash": "0x011e0aa413d1cf2ebe06cae20261448b37840cbe781a3260e1f1b833cf8b2882"
      }
    ],
    "blockNumber": 18746020,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f0e4963a4df59bdc2ad5ffb4867cb8c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"operation\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isValidSigner\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execute(address,uint256,bytes,uint256)\":{\"details\":\"Executes a low-level operation if the caller is a valid signer on the account Reverts and bubbles up error if operation fails\",\"params\":{\"data\":\"The encoded operation calldata\",\"operation\":\"A value indicating the type of operation to perform Accounts implementing this interface MUST accept the following operation parameter values: - 0 = CALL - 1 = DELEGATECALL - 2 = CREATE - 3 = CREATE2 Accounts implementing this interface MAY support additional operations or restrict a signer's ability to execute certain operations\",\"to\":\"The target address of the operation\",\"value\":\"The Ether value to be sent to the target\"},\"returns\":{\"result\":\"The result of the operation\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"token()\":{\"details\":\"Returns the identifier of the non-fungible token which owns the account The return value of this function MUST be constant - it MUST NOT change over time\",\"returns\":{\"_0\":\"      The EIP-155 ID of the chain the token exists on\",\"_1\":\"The contract address of the token\",\"_2\":\"      The ID of the token\"}}},\"stateVariables\":{\"state\":{\"details\":\"Returns a value that SHOULD be modified each time the account changes state\",\"return\":\"The current account state\",\"returns\":{\"_0\":\"The current account state\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC6551/Account-ERC721.sol\":\"ERC6551AccountERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x6b11eb41a228cca35d4b662b4df69fcd75192851365102690f57b2ac01e83fe6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/ERC6551/Account-ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\nimport \\\"../interfaces/IERC6551Account.sol\\\";\\nimport \\\"../interfaces/IERC6551Executable.sol\\\";\\n\\ncontract ERC6551AccountERC721 is IERC165, IERC1271, IERC6551Account, IERC6551Executable {\\n    uint256 public state;\\n\\n    receive() external payable {}\\n\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint256 operation\\n    ) external payable returns (bytes memory result) {\\n        require(_isValidSigner(msg.sender), \\\"Invalid signer\\\");\\n        require(operation == 0, \\\"Only call operations are supported\\\");\\n\\n        ++state;\\n\\n        bool success;\\n        (success, result) = to.call{value: value}(data);\\n\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    function isValidSigner(address signer, bytes calldata) external view returns (bytes4) {\\n        if (_isValidSigner(signer)) {\\n            return IERC6551Account.isValidSigner.selector;\\n        }\\n\\n        return bytes4(0);\\n    }\\n\\n    function isValidSignature(bytes32 hash, bytes memory signature)\\n        external\\n        view\\n        returns (bytes4 magicValue)\\n    {\\n        bool isValid = SignatureChecker.isValidSignatureNow(owner(), hash, signature);\\n\\n        if (isValid) {\\n            return IERC1271.isValidSignature.selector;\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        return (interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IERC6551Account).interfaceId ||\\n            interfaceId == type(IERC6551Executable).interfaceId);\\n    }\\n\\n    function token()\\n        public\\n        view\\n        returns (\\n            uint256,\\n            address,\\n            uint256\\n        )\\n    {\\n        bytes memory footer = new bytes(0x60);\\n\\n        assembly {\\n            extcodecopy(address(), add(footer, 0x20), 0x4d, 0x60)\\n        }\\n\\n        return abi.decode(footer, (uint256, address, uint256));\\n    }\\n\\n    function owner() public view returns (address) {\\n        (uint256 chainId, address tokenContract, uint256 tokenId) = token();\\n        if (chainId != block.chainid) return address(0);\\n\\n        return IERC721(tokenContract).ownerOf(tokenId);\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    function _isValidSigner(address signer) internal view returns (bool) {\\n        return signer == owner();\\n    } \\n}\",\"keccak256\":\"0x2ae03922ec6318f1737ab8129691ddb51c6cc71c721d5789d9928d845ffbb001\",\"license\":\"MIT\"},\"contracts/interfaces/IERC6551Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\npragma solidity ^0.8.20;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x6faff5f1`\\ninterface IERC6551Account {\\n    /**\\n     * @dev Allows the account to receive Ether\\n     *\\n     * Accounts MUST implement a `receive` function.\\n     *\\n     * Accounts MAY perform arbitrary logic to restrict conditions\\n     * under which Ether can be received.\\n     */\\n    receive() external payable;\\n\\n    /**\\n     * @dev Returns the identifier of the non-fungible token which owns the account\\n     *\\n     * The return value of this function MUST be constant - it MUST NOT change\\n     * over time\\n     *\\n     * @return chainId       The EIP-155 ID of the chain the token exists on\\n     * @return tokenContract The contract address of the token\\n     * @return tokenId       The ID of the token\\n     */\\n    function token()\\n        external\\n        view\\n        returns (\\n            uint256 chainId,\\n            address tokenContract,\\n            uint256 tokenId\\n        );\\n\\n    /**\\n     * @dev Returns a value that SHOULD be modified each time the account changes state\\n     *\\n     * @return The current account state\\n     */\\n    function state() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a magic value indicating whether a given signer is authorized to act on behalf of the account\\n     *\\n     * MUST return the bytes4 magic value 0x523e3260 if the given signer is valid\\n     *\\n     * By default, the holder of the non-fungible token the account is bound to MUST be considered a valid\\n     * signer\\n     *\\n     * Accounts MAY implement additional authorization logic which invalidates the holder as a\\n     * signer or grants signing permissions to other non-holder accounts\\n     *\\n     * @param  signer     The address to check signing authorization for\\n     * @param  context    Additional data used to determine whether the signer is valid\\n     * @return magicValue Magic value indicating whether the signer is valid\\n     */\\n    function isValidSigner(address signer, bytes calldata context)\\n        external\\n        view\\n        returns (bytes4 magicValue);\\n}\",\"keccak256\":\"0x0624b0409383e3fd417640cbdbd7755e4b9c8524660295c1c704b2191565784f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC6551Executable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x74420f4c`\\ninterface IERC6551Executable {\\n    /**\\n     * @dev Executes a low-level operation if the caller is a valid signer on the account\\n     *\\n     * Reverts and bubbles up error if operation fails\\n     *\\n     * @param to        The target address of the operation\\n     * @param value     The Ether value to be sent to the target\\n     * @param data      The encoded operation calldata\\n     * @param operation A value indicating the type of operation to perform\\n     *\\n     * Accounts implementing this interface MUST accept the following operation parameter values:\\n     * - 0 = CALL\\n     * - 1 = DELEGATECALL\\n     * - 2 = CREATE\\n     * - 3 = CREATE2\\n     *\\n     * Accounts implementing this interface MAY support additional operations or restrict a signer's\\n     * ability to execute certain operations\\n     *\\n     * @return The result of the operation\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint256 operation\\n    ) external payable returns (bytes memory);\\n}\",\"keccak256\":\"0x2140d9764f0798231f2376565f97bef9a5b6964f2d6c0df86f7acdb81af65a56\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611389806100206000396000f3fe60806040526004361061007f5760003560e01c806374420f4c1161004e57806374420f4c1461016d5780638da5cb5b1461019d578063c19d93fb146101c8578063fc0c546a146101f357610086565b806301ffc9a71461008b5780631626ba7e146100c85780633408e47014610105578063523e32601461013057610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad91906109d6565b610220565b6040516100bf9190610a1e565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea9190610bb5565b61035a565b6040516100fc9190610c20565b60405180910390f35b34801561011157600080fd5b5061011a610393565b6040516101279190610c54565b60405180910390f35b34801561013c57600080fd5b5061015760048036038101906101529190610d2d565b61039b565b6040516101649190610c20565b60405180910390f35b61018760048036038101906101829190610db9565b6103c9565b6040516101949190610ec0565b60405180910390f35b3480156101a957600080fd5b506101b26104f7565b6040516101bf9190610ef1565b60405180910390f35b3480156101d457600080fd5b506101dd6105a1565b6040516101ea9190610c54565b60405180910390f35b3480156101ff57600080fd5b506102086105a7565b60405161021793929190610f0c565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102eb57507f6faff5f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061035357507f74420f4c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008061036f6103686104f7565b8585610627565b9050801561038757631626ba7e60e01b91505061038d565b60009150505b92915050565b600046905090565b60006103a6846106b7565b156103ba5763523e326060e01b90506103c2565b600060e01b90505b9392505050565b60606103d4336106b7565b610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040a90610fa0565b60405180910390fd5b60008214610456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90611032565b60405180910390fd5b600080815461046490611081565b9190508190555060008673ffffffffffffffffffffffffffffffffffffffff168686866040516104959291906110f9565b60006040518083038185875af1925050503d80600081146104d2576040519150601f19603f3d011682016040523d82523d6000602084013e6104d7565b606091505b508093508192505050806104ed57815160208301fd5b5095945050505050565b6000806000806105056105a7565b92509250925046831461051e576000935050505061059e565b8173ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b81526004016105579190610c54565b602060405180830381865afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105989190611127565b93505050505b90565b60005481565b600080600080606067ffffffffffffffff8111156105c8576105c7610a8a565b5b6040519080825280601f01601f1916602001820160405280156105fa5781602001600182028036833780820191505090505b5090506060604d60208301303c8080602001905181019061061b91906111a7565b93509350935050909192565b600080600061063685856106f6565b50915091506000600381111561064f5761064e6111fa565b5b816003811115610662576106616111fa565b5b14801561069a57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806106ac57506106ab868686610752565b5b925050509392505050565b60006106c16104f7565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000806000604184510361073b5760008060006020870151925060408701519150606087015160001a905061072d88828585610876565b95509550955050505061074b565b60006002855160001b9250925092505b9250925092565b60008060008573ffffffffffffffffffffffffffffffffffffffff168585604051602401610781929190611238565b604051602081830303815290604052631626ba7e60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107d39190611299565b600060405180830381855afa9150503d806000811461080e576040519150601f19603f3d011682016040523d82523d6000602084013e610813565b606091505b509150915081801561082757506020815110155b801561086b5750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168180602001905181019061086991906112c5565b145b925050509392505050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c11156108b6576000600385925092509250610960565b6000600188888888604051600081526020016040526040516108db949392919061130e565b6020604051602081039080840390855afa1580156108fd573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361095157600060016000801b93509350935050610960565b8060008060001b935093509350505b9450945094915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6109b38161097e565b81146109be57600080fd5b50565b6000813590506109d0816109aa565b92915050565b6000602082840312156109ec576109eb610974565b5b60006109fa848285016109c1565b91505092915050565b60008115159050919050565b610a1881610a03565b82525050565b6000602082019050610a336000830184610a0f565b92915050565b6000819050919050565b610a4c81610a39565b8114610a5757600080fd5b50565b600081359050610a6981610a43565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ac282610a79565b810181811067ffffffffffffffff82111715610ae157610ae0610a8a565b5b80604052505050565b6000610af461096a565b9050610b008282610ab9565b919050565b600067ffffffffffffffff821115610b2057610b1f610a8a565b5b610b2982610a79565b9050602081019050919050565b82818337600083830152505050565b6000610b58610b5384610b05565b610aea565b905082815260208101848484011115610b7457610b73610a74565b5b610b7f848285610b36565b509392505050565b600082601f830112610b9c57610b9b610a6f565b5b8135610bac848260208601610b45565b91505092915050565b60008060408385031215610bcc57610bcb610974565b5b6000610bda85828601610a5a565b925050602083013567ffffffffffffffff811115610bfb57610bfa610979565b5b610c0785828601610b87565b9150509250929050565b610c1a8161097e565b82525050565b6000602082019050610c356000830184610c11565b92915050565b6000819050919050565b610c4e81610c3b565b82525050565b6000602082019050610c696000830184610c45565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c9a82610c6f565b9050919050565b610caa81610c8f565b8114610cb557600080fd5b50565b600081359050610cc781610ca1565b92915050565b600080fd5b600080fd5b60008083601f840112610ced57610cec610a6f565b5b8235905067ffffffffffffffff811115610d0a57610d09610ccd565b5b602083019150836001820283011115610d2657610d25610cd2565b5b9250929050565b600080600060408486031215610d4657610d45610974565b5b6000610d5486828701610cb8565b935050602084013567ffffffffffffffff811115610d7557610d74610979565b5b610d8186828701610cd7565b92509250509250925092565b610d9681610c3b565b8114610da157600080fd5b50565b600081359050610db381610d8d565b92915050565b600080600080600060808688031215610dd557610dd4610974565b5b6000610de388828901610cb8565b9550506020610df488828901610da4565b945050604086013567ffffffffffffffff811115610e1557610e14610979565b5b610e2188828901610cd7565b93509350506060610e3488828901610da4565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e7b578082015181840152602081019050610e60565b60008484015250505050565b6000610e9282610e41565b610e9c8185610e4c565b9350610eac818560208601610e5d565b610eb581610a79565b840191505092915050565b60006020820190508181036000830152610eda8184610e87565b905092915050565b610eeb81610c8f565b82525050565b6000602082019050610f066000830184610ee2565b92915050565b6000606082019050610f216000830186610c45565b610f2e6020830185610ee2565b610f3b6040830184610c45565b949350505050565b600082825260208201905092915050565b7f496e76616c6964207369676e6572000000000000000000000000000000000000600082015250565b6000610f8a600e83610f43565b9150610f9582610f54565b602082019050919050565b60006020820190508181036000830152610fb981610f7d565b9050919050565b7f4f6e6c792063616c6c206f7065726174696f6e732061726520737570706f727460008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b600061101c602283610f43565b915061102782610fc0565b604082019050919050565b6000602082019050818103600083015261104b8161100f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061108c82610c3b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110be576110bd611052565b5b600182019050919050565b600081905092915050565b60006110e083856110c9565b93506110ed838584610b36565b82840190509392505050565b60006111068284866110d4565b91508190509392505050565b60008151905061112181610ca1565b92915050565b60006020828403121561113d5761113c610974565b5b600061114b84828501611112565b91505092915050565b60008151905061116381610d8d565b92915050565b600061117482610c6f565b9050919050565b61118481611169565b811461118f57600080fd5b50565b6000815190506111a18161117b565b92915050565b6000806000606084860312156111c0576111bf610974565b5b60006111ce86828701611154565b93505060206111df86828701611192565b92505060406111f086828701611154565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61123281610a39565b82525050565b600060408201905061124d6000830185611229565b818103602083015261125f8184610e87565b90509392505050565b600061127382610e41565b61127d81856110c9565b935061128d818560208601610e5d565b80840191505092915050565b60006112a58284611268565b915081905092915050565b6000815190506112bf81610a43565b92915050565b6000602082840312156112db576112da610974565b5b60006112e9848285016112b0565b91505092915050565b600060ff82169050919050565b611308816112f2565b82525050565b60006080820190506113236000830187611229565b61133060208301866112ff565b61133d6040830185611229565b61134a6060830184611229565b9594505050505056fea2646970667358221220e81c3588f0259aa2cf82f166918b297662c0f1d12531ea53bbad6f6ca72dc74564736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c806374420f4c1161004e57806374420f4c1461016d5780638da5cb5b1461019d578063c19d93fb146101c8578063fc0c546a146101f357610086565b806301ffc9a71461008b5780631626ba7e146100c85780633408e47014610105578063523e32601461013057610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad91906109d6565b610220565b6040516100bf9190610a1e565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea9190610bb5565b61035a565b6040516100fc9190610c20565b60405180910390f35b34801561011157600080fd5b5061011a610393565b6040516101279190610c54565b60405180910390f35b34801561013c57600080fd5b5061015760048036038101906101529190610d2d565b61039b565b6040516101649190610c20565b60405180910390f35b61018760048036038101906101829190610db9565b6103c9565b6040516101949190610ec0565b60405180910390f35b3480156101a957600080fd5b506101b26104f7565b6040516101bf9190610ef1565b60405180910390f35b3480156101d457600080fd5b506101dd6105a1565b6040516101ea9190610c54565b60405180910390f35b3480156101ff57600080fd5b506102086105a7565b60405161021793929190610f0c565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102eb57507f6faff5f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061035357507f74420f4c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008061036f6103686104f7565b8585610627565b9050801561038757631626ba7e60e01b91505061038d565b60009150505b92915050565b600046905090565b60006103a6846106b7565b156103ba5763523e326060e01b90506103c2565b600060e01b90505b9392505050565b60606103d4336106b7565b610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040a90610fa0565b60405180910390fd5b60008214610456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90611032565b60405180910390fd5b600080815461046490611081565b9190508190555060008673ffffffffffffffffffffffffffffffffffffffff168686866040516104959291906110f9565b60006040518083038185875af1925050503d80600081146104d2576040519150601f19603f3d011682016040523d82523d6000602084013e6104d7565b606091505b508093508192505050806104ed57815160208301fd5b5095945050505050565b6000806000806105056105a7565b92509250925046831461051e576000935050505061059e565b8173ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b81526004016105579190610c54565b602060405180830381865afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105989190611127565b93505050505b90565b60005481565b600080600080606067ffffffffffffffff8111156105c8576105c7610a8a565b5b6040519080825280601f01601f1916602001820160405280156105fa5781602001600182028036833780820191505090505b5090506060604d60208301303c8080602001905181019061061b91906111a7565b93509350935050909192565b600080600061063685856106f6565b50915091506000600381111561064f5761064e6111fa565b5b816003811115610662576106616111fa565b5b14801561069a57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806106ac57506106ab868686610752565b5b925050509392505050565b60006106c16104f7565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000806000604184510361073b5760008060006020870151925060408701519150606087015160001a905061072d88828585610876565b95509550955050505061074b565b60006002855160001b9250925092505b9250925092565b60008060008573ffffffffffffffffffffffffffffffffffffffff168585604051602401610781929190611238565b604051602081830303815290604052631626ba7e60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107d39190611299565b600060405180830381855afa9150503d806000811461080e576040519150601f19603f3d011682016040523d82523d6000602084013e610813565b606091505b509150915081801561082757506020815110155b801561086b5750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168180602001905181019061086991906112c5565b145b925050509392505050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c11156108b6576000600385925092509250610960565b6000600188888888604051600081526020016040526040516108db949392919061130e565b6020604051602081039080840390855afa1580156108fd573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361095157600060016000801b93509350935050610960565b8060008060001b935093509350505b9450945094915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6109b38161097e565b81146109be57600080fd5b50565b6000813590506109d0816109aa565b92915050565b6000602082840312156109ec576109eb610974565b5b60006109fa848285016109c1565b91505092915050565b60008115159050919050565b610a1881610a03565b82525050565b6000602082019050610a336000830184610a0f565b92915050565b6000819050919050565b610a4c81610a39565b8114610a5757600080fd5b50565b600081359050610a6981610a43565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ac282610a79565b810181811067ffffffffffffffff82111715610ae157610ae0610a8a565b5b80604052505050565b6000610af461096a565b9050610b008282610ab9565b919050565b600067ffffffffffffffff821115610b2057610b1f610a8a565b5b610b2982610a79565b9050602081019050919050565b82818337600083830152505050565b6000610b58610b5384610b05565b610aea565b905082815260208101848484011115610b7457610b73610a74565b5b610b7f848285610b36565b509392505050565b600082601f830112610b9c57610b9b610a6f565b5b8135610bac848260208601610b45565b91505092915050565b60008060408385031215610bcc57610bcb610974565b5b6000610bda85828601610a5a565b925050602083013567ffffffffffffffff811115610bfb57610bfa610979565b5b610c0785828601610b87565b9150509250929050565b610c1a8161097e565b82525050565b6000602082019050610c356000830184610c11565b92915050565b6000819050919050565b610c4e81610c3b565b82525050565b6000602082019050610c696000830184610c45565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c9a82610c6f565b9050919050565b610caa81610c8f565b8114610cb557600080fd5b50565b600081359050610cc781610ca1565b92915050565b600080fd5b600080fd5b60008083601f840112610ced57610cec610a6f565b5b8235905067ffffffffffffffff811115610d0a57610d09610ccd565b5b602083019150836001820283011115610d2657610d25610cd2565b5b9250929050565b600080600060408486031215610d4657610d45610974565b5b6000610d5486828701610cb8565b935050602084013567ffffffffffffffff811115610d7557610d74610979565b5b610d8186828701610cd7565b92509250509250925092565b610d9681610c3b565b8114610da157600080fd5b50565b600081359050610db381610d8d565b92915050565b600080600080600060808688031215610dd557610dd4610974565b5b6000610de388828901610cb8565b9550506020610df488828901610da4565b945050604086013567ffffffffffffffff811115610e1557610e14610979565b5b610e2188828901610cd7565b93509350506060610e3488828901610da4565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e7b578082015181840152602081019050610e60565b60008484015250505050565b6000610e9282610e41565b610e9c8185610e4c565b9350610eac818560208601610e5d565b610eb581610a79565b840191505092915050565b60006020820190508181036000830152610eda8184610e87565b905092915050565b610eeb81610c8f565b82525050565b6000602082019050610f066000830184610ee2565b92915050565b6000606082019050610f216000830186610c45565b610f2e6020830185610ee2565b610f3b6040830184610c45565b949350505050565b600082825260208201905092915050565b7f496e76616c6964207369676e6572000000000000000000000000000000000000600082015250565b6000610f8a600e83610f43565b9150610f9582610f54565b602082019050919050565b60006020820190508181036000830152610fb981610f7d565b9050919050565b7f4f6e6c792063616c6c206f7065726174696f6e732061726520737570706f727460008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b600061101c602283610f43565b915061102782610fc0565b604082019050919050565b6000602082019050818103600083015261104b8161100f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061108c82610c3b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110be576110bd611052565b5b600182019050919050565b600081905092915050565b60006110e083856110c9565b93506110ed838584610b36565b82840190509392505050565b60006111068284866110d4565b91508190509392505050565b60008151905061112181610ca1565b92915050565b60006020828403121561113d5761113c610974565b5b600061114b84828501611112565b91505092915050565b60008151905061116381610d8d565b92915050565b600061117482610c6f565b9050919050565b61118481611169565b811461118f57600080fd5b50565b6000815190506111a18161117b565b92915050565b6000806000606084860312156111c0576111bf610974565b5b60006111ce86828701611154565b93505060206111df86828701611192565b92505060406111f086828701611154565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61123281610a39565b82525050565b600060408201905061124d6000830185611229565b818103602083015261125f8184610e87565b90509392505050565b600061127382610e41565b61127d81856110c9565b935061128d818560208601610e5d565b80840191505092915050565b60006112a58284611268565b915081905092915050565b6000815190506112bf81610a43565b92915050565b6000602082840312156112db576112da610974565b5b60006112e9848285016112b0565b91505092915050565b600060ff82169050919050565b611308816112f2565b82525050565b60006080820190506113236000830187611229565b61133060208301866112ff565b61133d6040830185611229565b61134a6060830184611229565b9594505050505056fea2646970667358221220e81c3588f0259aa2cf82f166918b297662c0f1d12531ea53bbad6f6ca72dc74564736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "execute(address,uint256,bytes,uint256)": {
        "details": "Executes a low-level operation if the caller is a valid signer on the account Reverts and bubbles up error if operation fails",
        "params": {
          "data": "The encoded operation calldata",
          "operation": "A value indicating the type of operation to perform Accounts implementing this interface MUST accept the following operation parameter values: - 0 = CALL - 1 = DELEGATECALL - 2 = CREATE - 3 = CREATE2 Accounts implementing this interface MAY support additional operations or restrict a signer's ability to execute certain operations",
          "to": "The target address of the operation",
          "value": "The Ether value to be sent to the target"
        },
        "returns": {
          "result": "The result of the operation"
        }
      },
      "isValidSignature(bytes32,bytes)": {
        "details": "Should return whether the signature provided is valid for the provided data",
        "params": {
          "hash": "Hash of the data to be signed",
          "signature": "Signature byte array associated with _data"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "token()": {
        "details": "Returns the identifier of the non-fungible token which owns the account The return value of this function MUST be constant - it MUST NOT change over time",
        "returns": {
          "_0": "      The EIP-155 ID of the chain the token exists on",
          "_1": "The contract address of the token",
          "_2": "      The ID of the token"
        }
      }
    },
    "stateVariables": {
      "state": {
        "details": "Returns a value that SHOULD be modified each time the account changes state",
        "return": "The current account state",
        "returns": {
          "_0": "The current account state"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 609,
        "contract": "contracts/ERC6551/Account-ERC721.sol:ERC6551AccountERC721",
        "label": "state",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}